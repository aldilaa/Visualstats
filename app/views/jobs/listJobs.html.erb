<h1>Listing all jobs to the build<% if (@jobs.size>0) %>  with commit id  <%= @jobs[0].commit_id %> <%end %> </h1>

<table class="table table-striped table-bordered table-hover">
  <tr>
    <th>Id</th>
    <th>Commit</th>
    <th>Source</th>
    <th>Source type</th>
    <th>Type</th>
    <th>State</th>
    <th>Number</th>
    <th>Config</th>
    <th>Started at</th>
    <th>Finished at</th>
    <th>Retries</th>
    <th>Allow failure</th>
    <th>Result</th>
  </tr>

<% @jobs.each do |job| %>
  <% if (job.result==1) %><tr class="success"><% else %><tr class="error"><%end%>
    <td><%= job.id %></td>
    <td><%= job.commit_id %></td>
    <td><%= job.source_id %></td>
    <td><%= job.source_type %></td>
    <td><%= job.type %></td>
    <td><%= job.state %></td>
    <td><%= job.number %></td>
    <td><%= job.config %></td>
    <td><%= job.started_at %></td>
    <td><%= job.finished_at %></td>
    <td><%= job.retries %></td>
    <td><%= job.allow_failure %></td>   
    <td><%= job.result %></td>

  </tr>
<% end %>
</table>

<br />

<%= javascript_tag do %>
d3.json('<% @jobs.to_json %>', 
            function(data){
            
             
            var width = 200,
                height = 200,
                radius = Math.min(width, height) / 2;

            var color = d3.scale.ordinal()
            .range(["#F2DEDE", "#DFF0D8"]);

            var arc = d3.svg.arc()
                .outerRadius(radius - 10)
                .innerRadius(0);

            var pie = d3.layout.pie()
                .value(function(d) { return d[0]; });

            var svg = d3.select("body").append("svg")
                .attr("width", width)
                .attr("height", height)
              .append("g")
                .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

            <!-- array of data objects represents amount at pos 1, label at pos 2 and percentage at pos 3 -->
            var result = new Array();
            result[0]=new Array();
            result[1]=new Array();

            result[0][0]=0;
            result[1][0]=0;

            data.forEach(function(d) {
               if (d.result==0) result[0][0]++;
               else result[1][0]++;
            });

            var allResults = result[0][0] + result[1][0];

            if (result[0][0]>0) {
                result[0][1]="fail";
                result[0][2]= (result[0][0]*100)/allResults;
            }
            if (result[1][0]>0) {
                result[1][1]="success";
                result[1][2]= (result[1][0]*100)/allResults;
            }

            var resultSize = result.length;            

            var g = svg.selectAll(".arc")
                  .data(pie(result))
                .enter().append("g")
                  .attr("class", "arc");

            g.append("path")
                  .attr("d", arc)
                  .style("fill", function() { return color(resultSize--); });

            var i=0;

            g.append("text")
                  .attr("transform", function(d) { return "translate(" + arc.centroid(d) + ")"; })
                  .attr("dy", ".35em")
                  .style("text-anchor", "middle")
                  .text(function(d) { return d.data[1]+" "+d.data[2]+"%"; });

            });
                   
<% end %>

