<h1>The number of succeeded Jobs based on Language</h1>
<%= javascript_include_tag 'd3.legend.js' %>

<%= javascript_tag do %>

  var  allRuby = <%= raw JobCompact.where("language = ?", "ruby").order(:finished_at).to_json %> 
  var  allRubinius = <%= raw JobCompact.where("language = ?", "rubinius").order(:finished_at).to_json %>
  var  allJobs = <%= raw JobCompact.all.to_json %>

  // console.log('ruby', JSON.stringify(allRuby));
  // console.log('rubinius', JSON.stringify(allRubinius));

  var  countRuby = <%= raw JobCompact.where("language = ?", "ruby").count %> 
  var  countRubinius = <%= raw JobCompact.where("language = ?", "rubinius").count %> 

  // console.log(countRuby);
  // console.log(countRubinius);

  var format = d3.time.format("%Y-%m-%dT%H:%M:%SZ");
  var format2 = d3.time.format("%Y-%m-%d");

  var margin = {top: 20, right: 20, bottom: 30, left: 40},
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

  var svg = d3.select("body").append("svg")
        .attr("class", "svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // var x =  d3.scale.ordinal()
  //     .rangeRoundBands([0, width], .1);

  var x = d3.time.scale()
  .domain([new Date(2012, 01, 01), new Date(2013, 12, 01)])
  .range([0, 1000]);

  
  var y = d3.scale.linear()
      .domain([0,10])
      .range([height, 0]);

  var xAxis = d3.svg.axis()
                    .scale(x)
                    .orient("bottom");

  var yAxis = d3.svg.axis()
                    .scale(y)
                    .tickValues([1,100])
                    .ticks(1)
                    .orient("left");

  var line = d3.svg.line()
                    .interpolate("linear")
                    .x(function(d) { return x(new Date(d.key)); })
                    .y(function(d) { return y(d.values); });

                  svg.append("g") // Render the axis by calling a <g> selection.
                    .attr("transform", "translate(0," + y.range()[0] + ")") //setzt x-achse an null punkt von y-achse
                    .attr("class", "x axis")
                    .call(xAxis)
                    .append("text")
                    .attr("transform", "translate(850)")
                    .attr("x", 8)
                    .attr("dx", "0.9em")
                    .style({'stroke':'black'})
                    .style("text-anchor", "end")
                    .text("Finished at");   

                
                  svg.append("g")
                    .attr("class", "y axis")
                    .call(yAxis)
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", ".71em")
                    .style({'stroke':'black'})
                    .style("text-anchor", "end")
                    .text("Percent");

    
    //DATA 1
    allRuby.forEach(function(d) {
                    //console.log(d.finished_at);
                    d.finished_at = format2(format.parse(d.finished_at));
                    //console.log(d.finished_at);
                  });


    var nesteddataRuby = d3.nest()
                            .key(function(d) { return d.finished_at; })
                            .rollup(function(d) { 
                                return d
                                    .map(function(dd){ return dd.result})
                                    .reduce(function(prev, current, index, array){
                                        d.finished_at
                                        return prev + current;
                                    }) 
                            })
                            .entries(allRuby);
      //console.log(nesteddataRuby);

      var group1 = svg.selectAll(".group1")
          .data(nesteddataRuby);

      console.log(group1);
      var groupEnter1 = group1.enter().append('g')
        .attr('class', 'group1')

      groupEnter1.append("circle")
        .attr("cx", function(d){return x(new Date(d.key));})
        .attr("cy", function(d){return y(d.values);})
        .attr("r", 5)
        .style({'fill':'magenta'})

      groupEnter1.append("path")
                    .attr("class", "line")
                    .attr("d", line(nesteddataRuby))
                    .attr("data-legend", function(d){return "ruby"})
                    .style({'stroke':'magenta'});

//DATA 2
      allRubinius.forEach(function(d) {
        //console.log(d.finished_at);
        d.finished_at = format2(format.parse(d.finished_at));
        //console.log(d.finished_at);
      });

                  
      var nesteddataRubinius = d3.nest()
                            .key(function(d) { return d.finished_at; })
                            .rollup(function(d) { 
                                return d
                                    .map(function(dd){ return +dd.result})
                                    .reduce(function(prev, current, index, array){
                                        d.finished_at
                                        console.log(index);
                                        return prev + current;
                                        
                                    }) 
                            })
                            .entries(allRubinius);
      //console.log(nesteddataRubinius);

      var group2 = svg.selectAll(".group2")
          .data(nesteddataRubinius);

      console.log(group2);
      var groupEnter2 = group2.enter().append('g')
        .attr('class', 'group2')

      groupEnter2.append("circle")
        .attr("cx", function(d){return x(new Date(d.key));})
        .attr("cy", function(d){return y(d.values);})
        .attr("r", 5)
        .style({'fill':'orange'})

      groupEnter2.append("path")
                    .attr("class", "line")
                    .attr("d", line(nesteddataRubinius))
                    .attr("data-legend", function(d){return "rubinius"})
                    .style({'stroke':'orange'});
     

      //mouse over graph              
                d3.selectAll("circle")
                    .on('mouseover', function(d){
                        svg.append('text')
                        .attr("x", x(new Date(d.key)))
                        .attr("y", y(d.values))
                        .text(d.values)
                        .attr('class','tip')
                        .style("font-size","1.5em")
                    })
                    .on('mouseout', function(d){
                        d3.selectAll(".tip").remove()
                    }); 

        //Legend
        legend = svg.append("g")
                    .attr("class","legend")
                    .attr("transform","translate(50,30)")
                    .style("font-size","12px")
                    .call(d3.legend);

                setTimeout(function() { 
                legend
                    .style("font-size","20px")
                    .attr("data-style-padding",10)
                    .call(d3.legend)
                },1000);

<% end %>